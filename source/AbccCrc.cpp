/******************************************************************************
**  Copyright (C) 2015-2022 HMS Industrial Networks Inc, all rights reserved
*******************************************************************************
**
**       File: AbccCrc.cpp
**    Summary: ABCC Crc-Unit. Uses ABCC40 defined CRC algorithms.
**
*******************************************************************************
******************************************************************************/

#include "Analyzer.h"
#include "AbccCrc.h"

static const U8 abBitReverseTable16[] =
{
	0x00, 0x08, 0x04, 0x0C,
	0x02, 0x0A, 0x06, 0x0E,
	0x01, 0x09, 0x05, 0x0D,
	0x03, 0x0B, 0x07, 0x0F
};

static const U32 adwCrcTable32[] =
{
	0x4DBDF21CUL, 0x500AE278UL, 0x76D3D2D4UL, 0x6B64C2B0UL,
	0x3B61B38CUL, 0x26D6A3E8UL, 0x000F9344UL, 0x1DB88320UL,
	0xA005713CUL, 0xBDB26158UL, 0x9B6B51F4UL, 0x86DC4190UL,
	0xD6D930ACUL, 0xCB6E20C8UL, 0xEDB71064UL, 0xF0000000UL
};

#if ABCC_CRC_ENABLE_CRC16
static const U8 abCrc16Hi[] =
{
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00,
	0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80,
	0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00,
	0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80,
	0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80,
	0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

static const U8 abCrc16Lo[] =
{
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05,
	0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA,
	0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA,
	0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15,
	0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10, 0xF0,
	0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35,
	0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B,
	0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA,
	0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27,
	0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
	0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64,
	0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
	0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE,
	0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7,
	0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
	0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
	0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99,
	0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E,
	0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46,
	0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};
#endif

void AbccCrc::Init()
{
	mCrc32 = 0;
#if ABCC_CRC_ENABLE_CRC16
	mCrc16 = 0;
#endif
}

void AbccCrc::Update(U8* pbBufferStart, U16 iLength)
{
	mCrc32 = CRC_Crc32(mCrc32, pbBufferStart, iLength);
#if ABCC_CRC_ENABLE_CRC16
	mCrc16 = CRC_Crc16(mCrc16, pbBufferStart, iLength);
#endif
}

#if ABCC_CRC_ENABLE_CRC16
U16 AbccCrc::Crc16()
{
	return CRC_FormatCrc16(mCrc16);
}
#endif

U32 AbccCrc::Crc32()
{
	return CRC_FormatCrc32(mCrc32);
}

U32 AbccCrc::CRC_Crc32(U32 iInitCrc, U8* pbBufferStart, U16 iLength)
{
	U8 bCrcReverseByte;
	U32 lCrc = iInitCrc;

	for (U16 i = 0; i < iLength; i++)
	{
		// Process upper-nibble
		bCrcReverseByte = (U8)(lCrc ^ abBitReverseTable16[(*pbBufferStart >> 4) & 0x0F]);
		lCrc = (lCrc >> 4) ^ adwCrcTable32[bCrcReverseByte & 0x0F];

		// Process lower-nibble
		bCrcReverseByte = (U8)(lCrc ^ abBitReverseTable16[(*pbBufferStart >> 0) & 0x0F]);
		lCrc = (lCrc >> 4) ^ adwCrcTable32[bCrcReverseByte & 0x0F];
		pbBufferStart++;
	}

	return lCrc;
}

#if ABCC_CRC_ENABLE_CRC16
U16 AbccCrc::CRC_Crc16(U16 iInitCrc, U8* pbBufferStart, U16 iLength)
{
	U8 bIndex, bCrcLo, bCrcHi;

	// Init crc
	bCrcLo = (U8)((iInitCrc >> 8) & 0xFF);
	bCrcHi = (U8)((iInitCrc >> 0) & 0xFF);

	// Do the crc calculation
	while (iLength > 0)
	{
		bIndex = bCrcLo ^ *pbBufferStart++;
		bCrcLo = bCrcHi ^ abCrc16Hi[bIndex];
		bCrcHi = abCrc16Lo[bIndex];
		iLength--;
	}

	return (bCrcHi | bCrcLo << 8);
}
#endif

U32 AbccCrc::CRC_FormatCrc32(U32 lCrc)
{
	return	((U32)abBitReverseTable16[(lCrc & 0x000000F0UL) >> 4]) |
			((U32)abBitReverseTable16[(lCrc & 0x0000000FUL)]) << 4 |
			((U32)abBitReverseTable16[(lCrc & 0x0000F000UL) >> 12] << 8) |
			((U32)abBitReverseTable16[(lCrc & 0x00000F00UL) >> 8] << 12) |
			((U32)abBitReverseTable16[(lCrc & 0x00F00000UL) >> 20] << 16) |
			((U32)abBitReverseTable16[(lCrc & 0x000F0000UL) >> 16] << 20) |
			((U32)abBitReverseTable16[(lCrc & 0xF0000000UL) >> 28] << 24) |
			((U32)abBitReverseTable16[(lCrc & 0x0F000000UL) >> 24] << 28);
}

#if ABCC_CRC_ENABLE_CRC16
U16 AbccCrc::CRC_FormatCrc16(U16 iCrc)
{
	return iCrc;
}
#endif

